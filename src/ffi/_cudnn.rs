/* automatically generated by rust-bindgen */

pub const CUDNN_MAJOR: u32 = 7;
pub const CUDNN_MINOR: u32 = 4;
pub const CUDNN_PATCHLEVEL: u32 = 2;
pub const CUDNN_VERSION: u32 = 7402;
pub const CUDNN_DIM_MAX: u32 = 8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudnnContext {
    _unused: [u8; 0],
}
pub type cudnnHandle_t = *mut cudnnContext;
extern "C" {
    pub fn cudnnGetVersion() -> usize;
}
extern "C" {
    pub fn cudnnGetCudartVersion() -> usize;
}
pub const CUDNN_STATUS_SUCCESS: cudnnStatus_t = 0;
pub const CUDNN_STATUS_NOT_INITIALIZED: cudnnStatus_t = 1;
pub const CUDNN_STATUS_ALLOC_FAILED: cudnnStatus_t = 2;
pub const CUDNN_STATUS_BAD_PARAM: cudnnStatus_t = 3;
pub const CUDNN_STATUS_INTERNAL_ERROR: cudnnStatus_t = 4;
pub const CUDNN_STATUS_INVALID_VALUE: cudnnStatus_t = 5;
pub const CUDNN_STATUS_ARCH_MISMATCH: cudnnStatus_t = 6;
pub const CUDNN_STATUS_MAPPING_ERROR: cudnnStatus_t = 7;
pub const CUDNN_STATUS_EXECUTION_FAILED: cudnnStatus_t = 8;
pub const CUDNN_STATUS_NOT_SUPPORTED: cudnnStatus_t = 9;
pub const CUDNN_STATUS_LICENSE_ERROR: cudnnStatus_t = 10;
pub const CUDNN_STATUS_RUNTIME_PREREQUISITE_MISSING: cudnnStatus_t = 11;
pub const CUDNN_STATUS_RUNTIME_IN_PROGRESS: cudnnStatus_t = 12;
pub const CUDNN_STATUS_RUNTIME_FP_OVERFLOW: cudnnStatus_t = 13;
pub type cudnnStatus_t = u32;
extern "C" {
    pub fn cudnnGetErrorString(status: cudnnStatus_t) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudnnRuntimeTag_t {
    _unused: [u8; 0],
}
pub const CUDNN_ERRQUERY_RAWCODE: cudnnErrQueryMode_t = 0;
pub const CUDNN_ERRQUERY_NONBLOCKING: cudnnErrQueryMode_t = 1;
pub const CUDNN_ERRQUERY_BLOCKING: cudnnErrQueryMode_t = 2;
pub type cudnnErrQueryMode_t = u32;
extern "C" {
    pub fn cudnnGetProperty(
        type_: libraryPropertyType,
        value: *mut ::std::os::raw::c_int,
    ) -> cudnnStatus_t;
}
extern "C" {
    pub fn cudnnCreate(handle: *mut cudnnHandle_t) -> cudnnStatus_t;
}
extern "C" {
    pub fn cudnnDestroy(handle: cudnnHandle_t) -> cudnnStatus_t;
}
extern "C" {
    pub fn cudnnSetStream(handle: cudnnHandle_t, streamId: cudaStream_t) -> cudnnStatus_t;
}
extern "C" {
    pub fn cudnnGetStream(handle: cudnnHandle_t, streamId: *mut cudaStream_t) -> cudnnStatus_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudnnTensorStruct {
    _unused: [u8; 0],
}
pub type cudnnTensorDescriptor_t = *mut cudnnTensorStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudnnConvolutionStruct {
    _unused: [u8; 0],
}
pub type cudnnConvolutionDescriptor_t = *mut cudnnConvolutionStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudnnPoolingStruct {
    _unused: [u8; 0],
}
pub type cudnnPoolingDescriptor_t = *mut cudnnPoolingStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudnnFilterStruct {
    _unused: [u8; 0],
}
pub type cudnnFilterDescriptor_t = *mut cudnnFilterStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudnnLRNStruct {
    _unused: [u8; 0],
}
pub type cudnnLRNDescriptor_t = *mut cudnnLRNStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudnnActivationStruct {
    _unused: [u8; 0],
}
pub type cudnnActivationDescriptor_t = *mut cudnnActivationStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudnnSpatialTransformerStruct {
    _unused: [u8; 0],
}
pub type cudnnSpatialTransformerDescriptor_t = *mut cudnnSpatialTransformerStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudnnOpTensorStruct {
    _unused: [u8; 0],
}
pub type cudnnOpTensorDescriptor_t = *mut cudnnOpTensorStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudnnReduceTensorStruct {
    _unused: [u8; 0],
}
pub type cudnnReduceTensorDescriptor_t = *mut cudnnReduceTensorStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudnnCTCLossStruct {
    _unused: [u8; 0],
}
pub type cudnnCTCLossDescriptor_t = *mut cudnnCTCLossStruct;
pub const CUDNN_DATA_FLOAT: cudnnDataType_t = 0;
pub const CUDNN_DATA_DOUBLE: cudnnDataType_t = 1;
pub const CUDNN_DATA_HALF: cudnnDataType_t = 2;
pub const CUDNN_DATA_INT8: cudnnDataType_t = 3;
pub const CUDNN_DATA_INT32: cudnnDataType_t = 4;
pub const CUDNN_DATA_INT8x4: cudnnDataType_t = 5;
pub const CUDNN_DATA_UINT8: cudnnDataType_t = 6;
pub const CUDNN_DATA_UINT8x4: cudnnDataType_t = 7;
pub const CUDNN_DATA_INT8x32: cudnnDataType_t = 8;
pub type cudnnDataType_t = u32;
pub const CUDNN_DEFAULT_MATH: cudnnMathType_t = 0;
pub const CUDNN_TENSOR_OP_MATH: cudnnMathType_t = 1;
pub const CUDNN_TENSOR_OP_MATH_ALLOW_CONVERSION: cudnnMathType_t = 2;
pub type cudnnMathType_t = u32;
pub const CUDNN_NOT_PROPAGATE_NAN: cudnnNanPropagation_t = 0;
pub const CUDNN_PROPAGATE_NAN: cudnnNanPropagation_t = 1;
pub type cudnnNanPropagation_t = u32;
pub const CUDNN_NON_DETERMINISTIC: cudnnDeterminism_t = 0;
pub const CUDNN_DETERMINISTIC: cudnnDeterminism_t = 1;
pub type cudnnDeterminism_t = u32;
extern "C" {
    pub fn cudnnCreateTensorDescriptor(tensorDesc: *mut cudnnTensorDescriptor_t) -> cudnnStatus_t;
}
pub const CUDNN_TENSOR_NCHW: cudnnTensorFormat_t = 0;
pub const CUDNN_TENSOR_NHWC: cudnnTensorFormat_t = 1;
pub const CUDNN_TENSOR_NCHW_VECT_C: cudnnTensorFormat_t = 2;
pub type cudnnTensorFormat_t = u32;
extern "C" {
    pub fn cudnnSetTensor4dDescriptor(
        tensorDesc: cudnnTensorDescriptor_t,
        format: cudnnTensorFormat_t,
        dataType: cudnnDataType_t,
        n: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
    ) -> cudnnStatus_t;
}
extern "C" {
    pub fn cudnnSetTensorNdDescriptor(
        tensorDesc: cudnnTensorDescriptor_t,
        dataType: cudnnDataType_t,
        nbDims: ::std::os::raw::c_int,
        dimA: *const ::std::os::raw::c_int,
        strideA: *const ::std::os::raw::c_int,
    ) -> cudnnStatus_t;
}
extern "C" {
    pub fn cudnnDestroyTensorDescriptor(tensorDesc: cudnnTensorDescriptor_t) -> cudnnStatus_t;
}
pub const CUDNN_OP_TENSOR_ADD: cudnnOpTensorOp_t = 0;
pub const CUDNN_OP_TENSOR_MUL: cudnnOpTensorOp_t = 1;
pub const CUDNN_OP_TENSOR_MIN: cudnnOpTensorOp_t = 2;
pub const CUDNN_OP_TENSOR_MAX: cudnnOpTensorOp_t = 3;
pub const CUDNN_OP_TENSOR_SQRT: cudnnOpTensorOp_t = 4;
pub const CUDNN_OP_TENSOR_NOT: cudnnOpTensorOp_t = 5;
pub type cudnnOpTensorOp_t = u32;
pub const CUDNN_REDUCE_TENSOR_ADD: cudnnReduceTensorOp_t = 0;
pub const CUDNN_REDUCE_TENSOR_MUL: cudnnReduceTensorOp_t = 1;
pub const CUDNN_REDUCE_TENSOR_MIN: cudnnReduceTensorOp_t = 2;
pub const CUDNN_REDUCE_TENSOR_MAX: cudnnReduceTensorOp_t = 3;
pub const CUDNN_REDUCE_TENSOR_AMAX: cudnnReduceTensorOp_t = 4;
pub const CUDNN_REDUCE_TENSOR_AVG: cudnnReduceTensorOp_t = 5;
pub const CUDNN_REDUCE_TENSOR_NORM1: cudnnReduceTensorOp_t = 6;
pub const CUDNN_REDUCE_TENSOR_NORM2: cudnnReduceTensorOp_t = 7;
pub const CUDNN_REDUCE_TENSOR_MUL_NO_ZEROS: cudnnReduceTensorOp_t = 8;
pub type cudnnReduceTensorOp_t = u32;
pub const CUDNN_REDUCE_TENSOR_NO_INDICES: cudnnReduceTensorIndices_t = 0;
pub const CUDNN_REDUCE_TENSOR_FLATTENED_INDICES: cudnnReduceTensorIndices_t = 1;
pub type cudnnReduceTensorIndices_t = u32;
pub const CUDNN_32BIT_INDICES: cudnnIndicesType_t = 0;
pub const CUDNN_64BIT_INDICES: cudnnIndicesType_t = 1;
pub const CUDNN_16BIT_INDICES: cudnnIndicesType_t = 2;
pub const CUDNN_8BIT_INDICES: cudnnIndicesType_t = 3;
pub type cudnnIndicesType_t = u32;
pub const CUDNN_CONVOLUTION: cudnnConvolutionMode_t = 0;
pub const CUDNN_CROSS_CORRELATION: cudnnConvolutionMode_t = 1;
pub type cudnnConvolutionMode_t = u32;
extern "C" {
    pub fn cudnnCreateFilterDescriptor(filterDesc: *mut cudnnFilterDescriptor_t) -> cudnnStatus_t;
}
extern "C" {
    pub fn cudnnSetFilter4dDescriptor(
        filterDesc: cudnnFilterDescriptor_t,
        dataType: cudnnDataType_t,
        format: cudnnTensorFormat_t,
        k: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
    ) -> cudnnStatus_t;
}
extern "C" {
    pub fn cudnnSetFilterNdDescriptor(
        filterDesc: cudnnFilterDescriptor_t,
        dataType: cudnnDataType_t,
        format: cudnnTensorFormat_t,
        nbDims: ::std::os::raw::c_int,
        filterDimA: *const ::std::os::raw::c_int,
    ) -> cudnnStatus_t;
}
extern "C" {
    pub fn cudnnDestroyFilterDescriptor(filterDesc: cudnnFilterDescriptor_t) -> cudnnStatus_t;
}
extern "C" {
    pub fn cudnnCreateConvolutionDescriptor(
        convDesc: *mut cudnnConvolutionDescriptor_t,
    ) -> cudnnStatus_t;
}
extern "C" {
    pub fn cudnnSetConvolutionMathType(
        convDesc: cudnnConvolutionDescriptor_t,
        mathType: cudnnMathType_t,
    ) -> cudnnStatus_t;
}
extern "C" {
    pub fn cudnnSetConvolutionGroupCount(
        convDesc: cudnnConvolutionDescriptor_t,
        groupCount: ::std::os::raw::c_int,
    ) -> cudnnStatus_t;
}
extern "C" {
    pub fn cudnnSetConvolution2dDescriptor(
        convDesc: cudnnConvolutionDescriptor_t,
        pad_h: ::std::os::raw::c_int,
        pad_w: ::std::os::raw::c_int,
        u: ::std::os::raw::c_int,
        v: ::std::os::raw::c_int,
        dilation_h: ::std::os::raw::c_int,
        dilation_w: ::std::os::raw::c_int,
        mode: cudnnConvolutionMode_t,
        computeType: cudnnDataType_t,
    ) -> cudnnStatus_t;
}
extern "C" {
    pub fn cudnnSetConvolutionNdDescriptor(
        convDesc: cudnnConvolutionDescriptor_t,
        arrayLength: ::std::os::raw::c_int,
        padA: *const ::std::os::raw::c_int,
        filterStrideA: *const ::std::os::raw::c_int,
        dilationA: *const ::std::os::raw::c_int,
        mode: cudnnConvolutionMode_t,
        computeType: cudnnDataType_t,
    ) -> cudnnStatus_t;
}
extern "C" {
    pub fn cudnnDestroyConvolutionDescriptor(
        convDesc: cudnnConvolutionDescriptor_t,
    ) -> cudnnStatus_t;
}
pub const CUDNN_CONVOLUTION_FWD_NO_WORKSPACE: cudnnConvolutionFwdPreference_t = 0;
pub const CUDNN_CONVOLUTION_FWD_PREFER_FASTEST: cudnnConvolutionFwdPreference_t = 1;
pub const CUDNN_CONVOLUTION_FWD_SPECIFY_WORKSPACE_LIMIT: cudnnConvolutionFwdPreference_t = 2;
pub type cudnnConvolutionFwdPreference_t = u32;
pub const CUDNN_CONVOLUTION_FWD_ALGO_IMPLICIT_GEMM: cudnnConvolutionFwdAlgo_t = 0;
pub const CUDNN_CONVOLUTION_FWD_ALGO_IMPLICIT_PRECOMP_GEMM: cudnnConvolutionFwdAlgo_t = 1;
pub const CUDNN_CONVOLUTION_FWD_ALGO_GEMM: cudnnConvolutionFwdAlgo_t = 2;
pub const CUDNN_CONVOLUTION_FWD_ALGO_DIRECT: cudnnConvolutionFwdAlgo_t = 3;
pub const CUDNN_CONVOLUTION_FWD_ALGO_FFT: cudnnConvolutionFwdAlgo_t = 4;
pub const CUDNN_CONVOLUTION_FWD_ALGO_FFT_TILING: cudnnConvolutionFwdAlgo_t = 5;
pub const CUDNN_CONVOLUTION_FWD_ALGO_WINOGRAD: cudnnConvolutionFwdAlgo_t = 6;
pub const CUDNN_CONVOLUTION_FWD_ALGO_WINOGRAD_NONFUSED: cudnnConvolutionFwdAlgo_t = 7;
pub const CUDNN_CONVOLUTION_FWD_ALGO_COUNT: cudnnConvolutionFwdAlgo_t = 8;
pub type cudnnConvolutionFwdAlgo_t = u32;
#[repr(C)]
pub struct cudnnConvolutionFwdAlgoPerf_t {
    pub algo: cudnnConvolutionFwdAlgo_t,
    pub status: cudnnStatus_t,
    pub time: f32,
    pub memory: usize,
    pub determinism: cudnnDeterminism_t,
    pub mathType: cudnnMathType_t,
    pub reserved: [::std::os::raw::c_int; 3usize],
}
#[test]
fn bindgen_test_layout_cudnnConvolutionFwdAlgoPerf_t() {
    assert_eq!(
        ::std::mem::size_of::<cudnnConvolutionFwdAlgoPerf_t>(),
        48usize,
        concat!("Size of: ", stringify!(cudnnConvolutionFwdAlgoPerf_t))
    );
    assert_eq!(
        ::std::mem::align_of::<cudnnConvolutionFwdAlgoPerf_t>(),
        8usize,
        concat!("Alignment of ", stringify!(cudnnConvolutionFwdAlgoPerf_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cudnnConvolutionFwdAlgoPerf_t>())).algo as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnConvolutionFwdAlgoPerf_t),
            "::",
            stringify!(algo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cudnnConvolutionFwdAlgoPerf_t>())).status as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnConvolutionFwdAlgoPerf_t),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cudnnConvolutionFwdAlgoPerf_t>())).time as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnConvolutionFwdAlgoPerf_t),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cudnnConvolutionFwdAlgoPerf_t>())).memory as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnConvolutionFwdAlgoPerf_t),
            "::",
            stringify!(memory)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cudnnConvolutionFwdAlgoPerf_t>())).determinism as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnConvolutionFwdAlgoPerf_t),
            "::",
            stringify!(determinism)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cudnnConvolutionFwdAlgoPerf_t>())).mathType as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnConvolutionFwdAlgoPerf_t),
            "::",
            stringify!(mathType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cudnnConvolutionFwdAlgoPerf_t>())).reserved as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnConvolutionFwdAlgoPerf_t),
            "::",
            stringify!(reserved)
        )
    );
}
extern "C" {
    pub fn cudnnConvolutionForward(
        handle: cudnnHandle_t,
        alpha: *const ::std::os::raw::c_void,
        xDesc: cudnnTensorDescriptor_t,
        x: *const ::std::os::raw::c_void,
        wDesc: cudnnFilterDescriptor_t,
        w: *const ::std::os::raw::c_void,
        convDesc: cudnnConvolutionDescriptor_t,
        algo: cudnnConvolutionFwdAlgo_t,
        workSpace: *mut ::std::os::raw::c_void,
        workSpaceSizeInBytes: usize,
        beta: *const ::std::os::raw::c_void,
        yDesc: cudnnTensorDescriptor_t,
        y: *mut ::std::os::raw::c_void,
    ) -> cudnnStatus_t;
}
extern "C" {
    pub fn cudnnConvolutionBackwardBias(
        handle: cudnnHandle_t,
        alpha: *const ::std::os::raw::c_void,
        dyDesc: cudnnTensorDescriptor_t,
        dy: *const ::std::os::raw::c_void,
        beta: *const ::std::os::raw::c_void,
        dbDesc: cudnnTensorDescriptor_t,
        db: *mut ::std::os::raw::c_void,
    ) -> cudnnStatus_t;
}
pub const CUDNN_CONVOLUTION_BWD_FILTER_NO_WORKSPACE: cudnnConvolutionBwdFilterPreference_t = 0;
pub const CUDNN_CONVOLUTION_BWD_FILTER_PREFER_FASTEST: cudnnConvolutionBwdFilterPreference_t = 1;
pub const CUDNN_CONVOLUTION_BWD_FILTER_SPECIFY_WORKSPACE_LIMIT:
    cudnnConvolutionBwdFilterPreference_t = 2;
pub type cudnnConvolutionBwdFilterPreference_t = u32;
pub const CUDNN_CONVOLUTION_BWD_FILTER_ALGO_0: cudnnConvolutionBwdFilterAlgo_t = 0;
pub const CUDNN_CONVOLUTION_BWD_FILTER_ALGO_1: cudnnConvolutionBwdFilterAlgo_t = 1;
pub const CUDNN_CONVOLUTION_BWD_FILTER_ALGO_FFT: cudnnConvolutionBwdFilterAlgo_t = 2;
pub const CUDNN_CONVOLUTION_BWD_FILTER_ALGO_3: cudnnConvolutionBwdFilterAlgo_t = 3;
pub const CUDNN_CONVOLUTION_BWD_FILTER_ALGO_WINOGRAD: cudnnConvolutionBwdFilterAlgo_t = 4;
pub const CUDNN_CONVOLUTION_BWD_FILTER_ALGO_WINOGRAD_NONFUSED: cudnnConvolutionBwdFilterAlgo_t = 5;
pub const CUDNN_CONVOLUTION_BWD_FILTER_ALGO_FFT_TILING: cudnnConvolutionBwdFilterAlgo_t = 6;
pub const CUDNN_CONVOLUTION_BWD_FILTER_ALGO_COUNT: cudnnConvolutionBwdFilterAlgo_t = 7;
pub type cudnnConvolutionBwdFilterAlgo_t = u32;
#[repr(C)]
pub struct cudnnConvolutionBwdFilterAlgoPerf_t {
    pub algo: cudnnConvolutionBwdFilterAlgo_t,
    pub status: cudnnStatus_t,
    pub time: f32,
    pub memory: usize,
    pub determinism: cudnnDeterminism_t,
    pub mathType: cudnnMathType_t,
    pub reserved: [::std::os::raw::c_int; 3usize],
}
#[test]
fn bindgen_test_layout_cudnnConvolutionBwdFilterAlgoPerf_t() {
    assert_eq!(
        ::std::mem::size_of::<cudnnConvolutionBwdFilterAlgoPerf_t>(),
        48usize,
        concat!("Size of: ", stringify!(cudnnConvolutionBwdFilterAlgoPerf_t))
    );
    assert_eq!(
        ::std::mem::align_of::<cudnnConvolutionBwdFilterAlgoPerf_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudnnConvolutionBwdFilterAlgoPerf_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cudnnConvolutionBwdFilterAlgoPerf_t>())).algo as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnConvolutionBwdFilterAlgoPerf_t),
            "::",
            stringify!(algo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cudnnConvolutionBwdFilterAlgoPerf_t>())).status as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnConvolutionBwdFilterAlgoPerf_t),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cudnnConvolutionBwdFilterAlgoPerf_t>())).time as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnConvolutionBwdFilterAlgoPerf_t),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cudnnConvolutionBwdFilterAlgoPerf_t>())).memory as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnConvolutionBwdFilterAlgoPerf_t),
            "::",
            stringify!(memory)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cudnnConvolutionBwdFilterAlgoPerf_t>())).determinism as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnConvolutionBwdFilterAlgoPerf_t),
            "::",
            stringify!(determinism)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cudnnConvolutionBwdFilterAlgoPerf_t>())).mathType as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnConvolutionBwdFilterAlgoPerf_t),
            "::",
            stringify!(mathType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cudnnConvolutionBwdFilterAlgoPerf_t>())).reserved as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnConvolutionBwdFilterAlgoPerf_t),
            "::",
            stringify!(reserved)
        )
    );
}
extern "C" {
    pub fn cudnnConvolutionBackwardFilter(
        handle: cudnnHandle_t,
        alpha: *const ::std::os::raw::c_void,
        xDesc: cudnnTensorDescriptor_t,
        x: *const ::std::os::raw::c_void,
        dyDesc: cudnnTensorDescriptor_t,
        dy: *const ::std::os::raw::c_void,
        convDesc: cudnnConvolutionDescriptor_t,
        algo: cudnnConvolutionBwdFilterAlgo_t,
        workSpace: *mut ::std::os::raw::c_void,
        workSpaceSizeInBytes: usize,
        beta: *const ::std::os::raw::c_void,
        dwDesc: cudnnFilterDescriptor_t,
        dw: *mut ::std::os::raw::c_void,
    ) -> cudnnStatus_t;
}
pub const CUDNN_CONVOLUTION_BWD_DATA_NO_WORKSPACE: cudnnConvolutionBwdDataPreference_t = 0;
pub const CUDNN_CONVOLUTION_BWD_DATA_PREFER_FASTEST: cudnnConvolutionBwdDataPreference_t = 1;
pub const CUDNN_CONVOLUTION_BWD_DATA_SPECIFY_WORKSPACE_LIMIT: cudnnConvolutionBwdDataPreference_t =
    2;
pub type cudnnConvolutionBwdDataPreference_t = u32;
pub const CUDNN_CONVOLUTION_BWD_DATA_ALGO_0: cudnnConvolutionBwdDataAlgo_t = 0;
pub const CUDNN_CONVOLUTION_BWD_DATA_ALGO_1: cudnnConvolutionBwdDataAlgo_t = 1;
pub const CUDNN_CONVOLUTION_BWD_DATA_ALGO_FFT: cudnnConvolutionBwdDataAlgo_t = 2;
pub const CUDNN_CONVOLUTION_BWD_DATA_ALGO_FFT_TILING: cudnnConvolutionBwdDataAlgo_t = 3;
pub const CUDNN_CONVOLUTION_BWD_DATA_ALGO_WINOGRAD: cudnnConvolutionBwdDataAlgo_t = 4;
pub const CUDNN_CONVOLUTION_BWD_DATA_ALGO_WINOGRAD_NONFUSED: cudnnConvolutionBwdDataAlgo_t = 5;
pub const CUDNN_CONVOLUTION_BWD_DATA_ALGO_COUNT: cudnnConvolutionBwdDataAlgo_t = 6;
pub type cudnnConvolutionBwdDataAlgo_t = u32;
#[repr(C)]
pub struct cudnnConvolutionBwdDataAlgoPerf_t {
    pub algo: cudnnConvolutionBwdDataAlgo_t,
    pub status: cudnnStatus_t,
    pub time: f32,
    pub memory: usize,
    pub determinism: cudnnDeterminism_t,
    pub mathType: cudnnMathType_t,
    pub reserved: [::std::os::raw::c_int; 3usize],
}
#[test]
fn bindgen_test_layout_cudnnConvolutionBwdDataAlgoPerf_t() {
    assert_eq!(
        ::std::mem::size_of::<cudnnConvolutionBwdDataAlgoPerf_t>(),
        48usize,
        concat!("Size of: ", stringify!(cudnnConvolutionBwdDataAlgoPerf_t))
    );
    assert_eq!(
        ::std::mem::align_of::<cudnnConvolutionBwdDataAlgoPerf_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudnnConvolutionBwdDataAlgoPerf_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cudnnConvolutionBwdDataAlgoPerf_t>())).algo as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnConvolutionBwdDataAlgoPerf_t),
            "::",
            stringify!(algo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cudnnConvolutionBwdDataAlgoPerf_t>())).status as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnConvolutionBwdDataAlgoPerf_t),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cudnnConvolutionBwdDataAlgoPerf_t>())).time as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnConvolutionBwdDataAlgoPerf_t),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cudnnConvolutionBwdDataAlgoPerf_t>())).memory as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnConvolutionBwdDataAlgoPerf_t),
            "::",
            stringify!(memory)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cudnnConvolutionBwdDataAlgoPerf_t>())).determinism as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnConvolutionBwdDataAlgoPerf_t),
            "::",
            stringify!(determinism)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cudnnConvolutionBwdDataAlgoPerf_t>())).mathType as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnConvolutionBwdDataAlgoPerf_t),
            "::",
            stringify!(mathType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cudnnConvolutionBwdDataAlgoPerf_t>())).reserved as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnConvolutionBwdDataAlgoPerf_t),
            "::",
            stringify!(reserved)
        )
    );
}
extern "C" {
    pub fn cudnnConvolutionBackwardData(
        handle: cudnnHandle_t,
        alpha: *const ::std::os::raw::c_void,
        wDesc: cudnnFilterDescriptor_t,
        w: *const ::std::os::raw::c_void,
        dyDesc: cudnnTensorDescriptor_t,
        dy: *const ::std::os::raw::c_void,
        convDesc: cudnnConvolutionDescriptor_t,
        algo: cudnnConvolutionBwdDataAlgo_t,
        workSpace: *mut ::std::os::raw::c_void,
        workSpaceSizeInBytes: usize,
        beta: *const ::std::os::raw::c_void,
        dxDesc: cudnnTensorDescriptor_t,
        dx: *mut ::std::os::raw::c_void,
    ) -> cudnnStatus_t;
}
pub const CUDNN_SOFTMAX_FAST: cudnnSoftmaxAlgorithm_t = 0;
pub const CUDNN_SOFTMAX_ACCURATE: cudnnSoftmaxAlgorithm_t = 1;
pub const CUDNN_SOFTMAX_LOG: cudnnSoftmaxAlgorithm_t = 2;
pub type cudnnSoftmaxAlgorithm_t = u32;
pub const CUDNN_SOFTMAX_MODE_INSTANCE: cudnnSoftmaxMode_t = 0;
pub const CUDNN_SOFTMAX_MODE_CHANNEL: cudnnSoftmaxMode_t = 1;
pub type cudnnSoftmaxMode_t = u32;
extern "C" {
    pub fn cudnnSoftmaxForward(
        handle: cudnnHandle_t,
        algo: cudnnSoftmaxAlgorithm_t,
        mode: cudnnSoftmaxMode_t,
        alpha: *const ::std::os::raw::c_void,
        xDesc: cudnnTensorDescriptor_t,
        x: *const ::std::os::raw::c_void,
        beta: *const ::std::os::raw::c_void,
        yDesc: cudnnTensorDescriptor_t,
        y: *mut ::std::os::raw::c_void,
    ) -> cudnnStatus_t;
}
extern "C" {
    pub fn cudnnSoftmaxBackward(
        handle: cudnnHandle_t,
        algo: cudnnSoftmaxAlgorithm_t,
        mode: cudnnSoftmaxMode_t,
        alpha: *const ::std::os::raw::c_void,
        yDesc: cudnnTensorDescriptor_t,
        y: *const ::std::os::raw::c_void,
        dyDesc: cudnnTensorDescriptor_t,
        dy: *const ::std::os::raw::c_void,
        beta: *const ::std::os::raw::c_void,
        dxDesc: cudnnTensorDescriptor_t,
        dx: *mut ::std::os::raw::c_void,
    ) -> cudnnStatus_t;
}
pub const CUDNN_POOLING_MAX: cudnnPoolingMode_t = 0;
pub const CUDNN_POOLING_AVERAGE_COUNT_INCLUDE_PADDING: cudnnPoolingMode_t = 1;
pub const CUDNN_POOLING_AVERAGE_COUNT_EXCLUDE_PADDING: cudnnPoolingMode_t = 2;
pub const CUDNN_POOLING_MAX_DETERMINISTIC: cudnnPoolingMode_t = 3;
pub type cudnnPoolingMode_t = u32;
extern "C" {
    pub fn cudnnCreatePoolingDescriptor(
        poolingDesc: *mut cudnnPoolingDescriptor_t,
    ) -> cudnnStatus_t;
}
extern "C" {
    pub fn cudnnSetPooling2dDescriptor(
        poolingDesc: cudnnPoolingDescriptor_t,
        mode: cudnnPoolingMode_t,
        maxpoolingNanOpt: cudnnNanPropagation_t,
        windowHeight: ::std::os::raw::c_int,
        windowWidth: ::std::os::raw::c_int,
        verticalPadding: ::std::os::raw::c_int,
        horizontalPadding: ::std::os::raw::c_int,
        verticalStride: ::std::os::raw::c_int,
        horizontalStride: ::std::os::raw::c_int,
    ) -> cudnnStatus_t;
}
extern "C" {
    pub fn cudnnSetPoolingNdDescriptor(
        poolingDesc: cudnnPoolingDescriptor_t,
        mode: cudnnPoolingMode_t,
        maxpoolingNanOpt: cudnnNanPropagation_t,
        nbDims: ::std::os::raw::c_int,
        windowDimA: *const ::std::os::raw::c_int,
        paddingA: *const ::std::os::raw::c_int,
        strideA: *const ::std::os::raw::c_int,
    ) -> cudnnStatus_t;
}
extern "C" {
    pub fn cudnnDestroyPoolingDescriptor(poolingDesc: cudnnPoolingDescriptor_t) -> cudnnStatus_t;
}
extern "C" {
    pub fn cudnnPoolingForward(
        handle: cudnnHandle_t,
        poolingDesc: cudnnPoolingDescriptor_t,
        alpha: *const ::std::os::raw::c_void,
        xDesc: cudnnTensorDescriptor_t,
        x: *const ::std::os::raw::c_void,
        beta: *const ::std::os::raw::c_void,
        yDesc: cudnnTensorDescriptor_t,
        y: *mut ::std::os::raw::c_void,
    ) -> cudnnStatus_t;
}
extern "C" {
    pub fn cudnnPoolingBackward(
        handle: cudnnHandle_t,
        poolingDesc: cudnnPoolingDescriptor_t,
        alpha: *const ::std::os::raw::c_void,
        yDesc: cudnnTensorDescriptor_t,
        y: *const ::std::os::raw::c_void,
        dyDesc: cudnnTensorDescriptor_t,
        dy: *const ::std::os::raw::c_void,
        xDesc: cudnnTensorDescriptor_t,
        x: *const ::std::os::raw::c_void,
        beta: *const ::std::os::raw::c_void,
        dxDesc: cudnnTensorDescriptor_t,
        dx: *mut ::std::os::raw::c_void,
    ) -> cudnnStatus_t;
}
pub const CUDNN_ACTIVATION_SIGMOID: cudnnActivationMode_t = 0;
pub const CUDNN_ACTIVATION_RELU: cudnnActivationMode_t = 1;
pub const CUDNN_ACTIVATION_TANH: cudnnActivationMode_t = 2;
pub const CUDNN_ACTIVATION_CLIPPED_RELU: cudnnActivationMode_t = 3;
pub const CUDNN_ACTIVATION_ELU: cudnnActivationMode_t = 4;
pub const CUDNN_ACTIVATION_IDENTITY: cudnnActivationMode_t = 5;
pub type cudnnActivationMode_t = u32;
extern "C" {
    pub fn cudnnCreateActivationDescriptor(
        activationDesc: *mut cudnnActivationDescriptor_t,
    ) -> cudnnStatus_t;
}
extern "C" {
    pub fn cudnnSetActivationDescriptor(
        activationDesc: cudnnActivationDescriptor_t,
        mode: cudnnActivationMode_t,
        reluNanOpt: cudnnNanPropagation_t,
        coef: f64,
    ) -> cudnnStatus_t;
}
extern "C" {
    pub fn cudnnDestroyActivationDescriptor(
        activationDesc: cudnnActivationDescriptor_t,
    ) -> cudnnStatus_t;
}
pub const CUDNN_LRN_CROSS_CHANNEL_DIM1: cudnnLRNMode_t = 0;
pub type cudnnLRNMode_t = u32;
pub const CUDNN_DIVNORM_PRECOMPUTED_MEANS: cudnnDivNormMode_t = 0;
pub type cudnnDivNormMode_t = u32;
pub const CUDNN_BATCHNORM_PER_ACTIVATION: cudnnBatchNormMode_t = 0;
pub const CUDNN_BATCHNORM_SPATIAL: cudnnBatchNormMode_t = 1;
pub const CUDNN_BATCHNORM_SPATIAL_PERSISTENT: cudnnBatchNormMode_t = 2;
pub type cudnnBatchNormMode_t = u32;
pub const CUDNN_BATCHNORM_OPS_BN: cudnnBatchNormOps_t = 0;
pub const CUDNN_BATCHNORM_OPS_BN_ACTIVATION: cudnnBatchNormOps_t = 1;
pub const CUDNN_BATCHNORM_OPS_BN_ADD_ACTIVATION: cudnnBatchNormOps_t = 2;
pub type cudnnBatchNormOps_t = u32;
pub const CUDNN_SAMPLER_BILINEAR: cudnnSamplerType_t = 0;
pub type cudnnSamplerType_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudnnDropoutStruct {
    _unused: [u8; 0],
}
pub type cudnnDropoutDescriptor_t = *mut cudnnDropoutStruct;
pub const CUDNN_RNN_RELU: cudnnRNNMode_t = 0;
pub const CUDNN_RNN_TANH: cudnnRNNMode_t = 1;
pub const CUDNN_LSTM: cudnnRNNMode_t = 2;
pub const CUDNN_GRU: cudnnRNNMode_t = 3;
pub type cudnnRNNMode_t = u32;
pub const CUDNN_UNIDIRECTIONAL: cudnnDirectionMode_t = 0;
pub const CUDNN_BIDIRECTIONAL: cudnnDirectionMode_t = 1;
pub type cudnnDirectionMode_t = u32;
pub const CUDNN_LINEAR_INPUT: cudnnRNNInputMode_t = 0;
pub const CUDNN_SKIP_INPUT: cudnnRNNInputMode_t = 1;
pub type cudnnRNNInputMode_t = u32;
pub const CUDNN_RNN_ALGO_STANDARD: cudnnRNNAlgo_t = 0;
pub const CUDNN_RNN_ALGO_PERSIST_STATIC: cudnnRNNAlgo_t = 1;
pub const CUDNN_RNN_ALGO_PERSIST_DYNAMIC: cudnnRNNAlgo_t = 2;
pub const CUDNN_RNN_ALGO_COUNT: cudnnRNNAlgo_t = 3;
pub type cudnnRNNAlgo_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudnnAlgorithmStruct {
    _unused: [u8; 0],
}
pub type cudnnAlgorithmDescriptor_t = *mut cudnnAlgorithmStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudnnAlgorithmPerformanceStruct {
    _unused: [u8; 0],
}
pub type cudnnAlgorithmPerformance_t = *mut cudnnAlgorithmPerformanceStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudnnRNNStruct {
    _unused: [u8; 0],
}
pub type cudnnRNNDescriptor_t = *mut cudnnRNNStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudnnPersistentRNNPlan {
    _unused: [u8; 0],
}
pub type cudnnPersistentRNNPlan_t = *mut cudnnPersistentRNNPlan;
pub const CUDNN_CTC_LOSS_ALGO_DETERMINISTIC: cudnnCTCLossAlgo_t = 0;
pub const CUDNN_CTC_LOSS_ALGO_NON_DETERMINISTIC: cudnnCTCLossAlgo_t = 1;
pub type cudnnCTCLossAlgo_t = u32;
#[repr(C)]
pub struct cudnnAlgorithm_t {
    pub algo: cudnnAlgorithm_t_Algorithm,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cudnnAlgorithm_t_Algorithm {
    pub convFwdAlgo: cudnnConvolutionFwdAlgo_t,
    pub convBwdFilterAlgo: cudnnConvolutionBwdFilterAlgo_t,
    pub convBwdDataAlgo: cudnnConvolutionBwdDataAlgo_t,
    pub RNNAlgo: cudnnRNNAlgo_t,
    pub CTCLossAlgo: cudnnCTCLossAlgo_t,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_cudnnAlgorithm_t_Algorithm() {
    assert_eq!(
        ::std::mem::size_of::<cudnnAlgorithm_t_Algorithm>(),
        4usize,
        concat!("Size of: ", stringify!(cudnnAlgorithm_t_Algorithm))
    );
    assert_eq!(
        ::std::mem::align_of::<cudnnAlgorithm_t_Algorithm>(),
        4usize,
        concat!("Alignment of ", stringify!(cudnnAlgorithm_t_Algorithm))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cudnnAlgorithm_t_Algorithm>())).convFwdAlgo as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnAlgorithm_t_Algorithm),
            "::",
            stringify!(convFwdAlgo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cudnnAlgorithm_t_Algorithm>())).convBwdFilterAlgo as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnAlgorithm_t_Algorithm),
            "::",
            stringify!(convBwdFilterAlgo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cudnnAlgorithm_t_Algorithm>())).convBwdDataAlgo as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnAlgorithm_t_Algorithm),
            "::",
            stringify!(convBwdDataAlgo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cudnnAlgorithm_t_Algorithm>())).RNNAlgo as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnAlgorithm_t_Algorithm),
            "::",
            stringify!(RNNAlgo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cudnnAlgorithm_t_Algorithm>())).CTCLossAlgo as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnAlgorithm_t_Algorithm),
            "::",
            stringify!(CTCLossAlgo)
        )
    );
}
#[test]
fn bindgen_test_layout_cudnnAlgorithm_t() {
    assert_eq!(
        ::std::mem::size_of::<cudnnAlgorithm_t>(),
        4usize,
        concat!("Size of: ", stringify!(cudnnAlgorithm_t))
    );
    assert_eq!(
        ::std::mem::align_of::<cudnnAlgorithm_t>(),
        4usize,
        concat!("Alignment of ", stringify!(cudnnAlgorithm_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cudnnAlgorithm_t>())).algo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnAlgorithm_t),
            "::",
            stringify!(algo)
        )
    );
}
pub const CUDNN_RNN_CLIP_NONE: cudnnRNNClipMode_t = 0;
pub const CUDNN_RNN_CLIP_MINMAX: cudnnRNNClipMode_t = 1;
pub type cudnnRNNClipMode_t = u32;
pub const CUDNN_SEV_FATAL: cudnnSeverity_t = 0;
pub const CUDNN_SEV_ERROR: cudnnSeverity_t = 1;
pub const CUDNN_SEV_WARNING: cudnnSeverity_t = 2;
pub const CUDNN_SEV_INFO: cudnnSeverity_t = 3;
pub type cudnnSeverity_t = u32;
#[repr(C)]
pub struct cudnnDebug_t {
    pub cudnn_version: ::std::os::raw::c_uint,
    pub cudnnStatus: cudnnStatus_t,
    pub time_sec: ::std::os::raw::c_uint,
    pub time_usec: ::std::os::raw::c_uint,
    pub time_delta: ::std::os::raw::c_uint,
    pub handle: cudnnHandle_t,
    pub stream: cudaStream_t,
    pub pid: ::std::os::raw::c_ulonglong,
    pub tid: ::std::os::raw::c_ulonglong,
    pub cudaDeviceId: ::std::os::raw::c_int,
    pub reserved: [::std::os::raw::c_int; 15usize],
}
#[test]
fn bindgen_test_layout_cudnnDebug_t() {
    assert_eq!(
        ::std::mem::size_of::<cudnnDebug_t>(),
        120usize,
        concat!("Size of: ", stringify!(cudnnDebug_t))
    );
    assert_eq!(
        ::std::mem::align_of::<cudnnDebug_t>(),
        8usize,
        concat!("Alignment of ", stringify!(cudnnDebug_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cudnnDebug_t>())).cudnn_version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnDebug_t),
            "::",
            stringify!(cudnn_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cudnnDebug_t>())).cudnnStatus as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnDebug_t),
            "::",
            stringify!(cudnnStatus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cudnnDebug_t>())).time_sec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnDebug_t),
            "::",
            stringify!(time_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cudnnDebug_t>())).time_usec as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnDebug_t),
            "::",
            stringify!(time_usec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cudnnDebug_t>())).time_delta as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnDebug_t),
            "::",
            stringify!(time_delta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cudnnDebug_t>())).handle as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnDebug_t),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cudnnDebug_t>())).stream as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnDebug_t),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cudnnDebug_t>())).pid as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnDebug_t),
            "::",
            stringify!(pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cudnnDebug_t>())).tid as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnDebug_t),
            "::",
            stringify!(tid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cudnnDebug_t>())).cudaDeviceId as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnDebug_t),
            "::",
            stringify!(cudaDeviceId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cudnnDebug_t>())).reserved as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(cudnnDebug_t),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudnnRNNDataStruct {
    _unused: [u8; 0],
}
pub type cudnnRNNDataDescriptor_t = *mut cudnnRNNDataStruct;
pub const CUDNN_RNN_DATA_LAYOUT_SEQ_MAJOR_UNPACKED: cudnnRNNDataLayout_t = 0;
pub const CUDNN_RNN_DATA_LAYOUT_SEQ_MAJOR_PACKED: cudnnRNNDataLayout_t = 1;
pub const CUDNN_RNN_DATA_LAYOUT_BATCH_MAJOR_UNPACKED: cudnnRNNDataLayout_t = 2;
pub type cudnnRNNDataLayout_t = u32;
pub const CUDNN_RNN_PADDED_IO_DISABLED: cudnnRNNPaddingMode_t = 0;
pub const CUDNN_RNN_PADDED_IO_ENABLED: cudnnRNNPaddingMode_t = 1;
pub type cudnnRNNPaddingMode_t = u32;
